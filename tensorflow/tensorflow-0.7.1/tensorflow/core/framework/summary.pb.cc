// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/summary.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/framework/summary.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* HistogramProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistogramProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Summary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Summary_reflection_ = NULL;
const ::google::protobuf::Descriptor* Summary_Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Summary_Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* Summary_Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Summary_Value_reflection_ = NULL;
struct Summary_ValueOneofInstance {
  float simple_value_;
  ::google::protobuf::internal::ArenaStringPtr obsolete_old_style_histogram_;
  const ::tensorflow::Summary_Image* image_;
  const ::tensorflow::HistogramProto* histo_;
}* Summary_Value_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fsummary_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fframework_2fsummary_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/framework/summary.proto");
  GOOGLE_CHECK(file != NULL);
  HistogramProto_descriptor_ = file->message_type(0);
  static const int HistogramProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramProto, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramProto, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramProto, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramProto, sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramProto, sum_squares_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramProto, bucket_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramProto, bucket_),
  };
  HistogramProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HistogramProto_descriptor_,
      HistogramProto::default_instance_,
      HistogramProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(HistogramProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramProto, _is_default_instance_));
  Summary_descriptor_ = file->message_type(1);
  static const int Summary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summary, value_),
  };
  Summary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Summary_descriptor_,
      Summary::default_instance_,
      Summary_offsets_,
      -1,
      -1,
      -1,
      sizeof(Summary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summary, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summary, _is_default_instance_));
  Summary_Image_descriptor_ = Summary_descriptor_->nested_type(0);
  static const int Summary_Image_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summary_Image, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summary_Image, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summary_Image, colorspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summary_Image, encoded_image_string_),
  };
  Summary_Image_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Summary_Image_descriptor_,
      Summary_Image::default_instance_,
      Summary_Image_offsets_,
      -1,
      -1,
      -1,
      sizeof(Summary_Image),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summary_Image, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summary_Image, _is_default_instance_));
  Summary_Value_descriptor_ = Summary_descriptor_->nested_type(1);
  static const int Summary_Value_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summary_Value, tag_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Summary_Value_default_oneof_instance_, simple_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Summary_Value_default_oneof_instance_, obsolete_old_style_histogram_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Summary_Value_default_oneof_instance_, image_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Summary_Value_default_oneof_instance_, histo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summary_Value, value_),
  };
  Summary_Value_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Summary_Value_descriptor_,
      Summary_Value::default_instance_,
      Summary_Value_offsets_,
      -1,
      -1,
      -1,
      Summary_Value_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summary_Value, _oneof_case_[0]),
      sizeof(Summary_Value),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summary_Value, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summary_Value, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fsummary_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HistogramProto_descriptor_, &HistogramProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Summary_descriptor_, &Summary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Summary_Image_descriptor_, &Summary_Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Summary_Value_descriptor_, &Summary_Value::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fsummary_2eproto() {
  delete HistogramProto::default_instance_;
  delete HistogramProto_reflection_;
  delete Summary::default_instance_;
  delete Summary_reflection_;
  delete Summary_Image::default_instance_;
  delete Summary_Image_reflection_;
  delete Summary_Value::default_instance_;
  delete Summary_Value_default_oneof_instance_;
  delete Summary_Value_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fframework_2fsummary_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'tensorflow/core/framework/summary.prot"
    "o\022\ntensorflow\"\207\001\n\016HistogramProto\022\013\n\003min\030"
    "\001 \001(\001\022\013\n\003max\030\002 \001(\001\022\013\n\003num\030\003 \001(\001\022\013\n\003sum\030\004"
    " \001(\001\022\023\n\013sum_squares\030\005 \001(\001\022\030\n\014bucket_limi"
    "t\030\006 \003(\001B\002\020\001\022\022\n\006bucket\030\007 \003(\001B\002\020\001\"\306\002\n\007Summ"
    "ary\022(\n\005value\030\001 \003(\0132\031.tensorflow.Summary."
    "Value\032X\n\005Image\022\016\n\006height\030\001 \001(\005\022\r\n\005width\030"
    "\002 \001(\005\022\022\n\ncolorspace\030\003 \001(\005\022\034\n\024encoded_ima"
    "ge_string\030\004 \001(\014\032\266\001\n\005Value\022\013\n\003tag\030\001 \001(\t\022\026"
    "\n\014simple_value\030\002 \001(\002H\000\022&\n\034obsolete_old_s"
    "tyle_histogram\030\003 \001(\014H\000\022*\n\005image\030\004 \001(\0132\031."
    "tensorflow.Summary.ImageH\000\022+\n\005histo\030\005 \001("
    "\0132\032.tensorflow.HistogramProtoH\000B\007\n\005value"
    "B+\n\030org.tensorflow.frameworkB\rSummaryPro"
    "tosP\001b\006proto3", 573);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/framework/summary.proto", &protobuf_RegisterTypes);
  HistogramProto::default_instance_ = new HistogramProto();
  Summary::default_instance_ = new Summary();
  Summary_Image::default_instance_ = new Summary_Image();
  Summary_Value::default_instance_ = new Summary_Value();
  Summary_Value_default_oneof_instance_ = new Summary_ValueOneofInstance();
  HistogramProto::default_instance_->InitAsDefaultInstance();
  Summary::default_instance_->InitAsDefaultInstance();
  Summary_Image::default_instance_->InitAsDefaultInstance();
  Summary_Value::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fsummary_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fframework_2fsummary_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fframework_2fsummary_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fframework_2fsummary_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fframework_2fsummary_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistogramProto::kMinFieldNumber;
const int HistogramProto::kMaxFieldNumber;
const int HistogramProto::kNumFieldNumber;
const int HistogramProto::kSumFieldNumber;
const int HistogramProto::kSumSquaresFieldNumber;
const int HistogramProto::kBucketLimitFieldNumber;
const int HistogramProto::kBucketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistogramProto::HistogramProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.HistogramProto)
}

void HistogramProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HistogramProto::HistogramProto(const HistogramProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.HistogramProto)
}

void HistogramProto::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  min_ = 0;
  max_ = 0;
  num_ = 0;
  sum_ = 0;
  sum_squares_ = 0;
}

HistogramProto::~HistogramProto() {
  // @@protoc_insertion_point(destructor:tensorflow.HistogramProto)
  SharedDtor();
}

void HistogramProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistogramProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistogramProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistogramProto_descriptor_;
}

const HistogramProto& HistogramProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fsummary_2eproto();
  return *default_instance_;
}

HistogramProto* HistogramProto::default_instance_ = NULL;

HistogramProto* HistogramProto::New(::google::protobuf::Arena* arena) const {
  HistogramProto* n = new HistogramProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistogramProto::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HistogramProto*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(min_, sum_squares_);

#undef ZR_HELPER_
#undef ZR_

  bucket_limit_.Clear();
  bucket_.Clear();
}

bool HistogramProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.HistogramProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double min = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_max;
        break;
      }

      // optional double max = 2;
      case 2: {
        if (tag == 17) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_num;
        break;
      }

      // optional double num = 3;
      case 3: {
        if (tag == 25) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_sum;
        break;
      }

      // optional double sum = 4;
      case 4: {
        if (tag == 33) {
         parse_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_sum_squares;
        break;
      }

      // optional double sum_squares = 5;
      case 5: {
        if (tag == 41) {
         parse_sum_squares:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum_squares_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bucket_limit;
        break;
      }

      // repeated double bucket_limit = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_bucket_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_bucket_limit())));
        } else if (tag == 49) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50, input, this->mutable_bucket_limit())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_bucket;
        break;
      }

      // repeated double bucket = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_bucket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_bucket())));
        } else if (tag == 57) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 58, input, this->mutable_bucket())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.HistogramProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.HistogramProto)
  return false;
#undef DO_
}

void HistogramProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.HistogramProto)
  // optional double min = 1;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min(), output);
  }

  // optional double max = 2;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max(), output);
  }

  // optional double num = 3;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->num(), output);
  }

  // optional double sum = 4;
  if (this->sum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sum(), output);
  }

  // optional double sum_squares = 5;
  if (this->sum_squares() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sum_squares(), output);
  }

  // repeated double bucket_limit = 6 [packed = true];
  if (this->bucket_limit_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bucket_limit_cached_byte_size_);
  }
  for (int i = 0; i < this->bucket_limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->bucket_limit(i), output);
  }

  // repeated double bucket = 7 [packed = true];
  if (this->bucket_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bucket_cached_byte_size_);
  }
  for (int i = 0; i < this->bucket_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->bucket(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.HistogramProto)
}

::google::protobuf::uint8* HistogramProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.HistogramProto)
  // optional double min = 1;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min(), target);
  }

  // optional double max = 2;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max(), target);
  }

  // optional double num = 3;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->num(), target);
  }

  // optional double sum = 4;
  if (this->sum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sum(), target);
  }

  // optional double sum_squares = 5;
  if (this->sum_squares() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->sum_squares(), target);
  }

  // repeated double bucket_limit = 6 [packed = true];
  if (this->bucket_limit_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _bucket_limit_cached_byte_size_, target);
  }
  for (int i = 0; i < this->bucket_limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->bucket_limit(i), target);
  }

  // repeated double bucket = 7 [packed = true];
  if (this->bucket_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _bucket_cached_byte_size_, target);
  }
  for (int i = 0; i < this->bucket_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->bucket(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.HistogramProto)
  return target;
}

int HistogramProto::ByteSize() const {
  int total_size = 0;

  // optional double min = 1;
  if (this->min() != 0) {
    total_size += 1 + 8;
  }

  // optional double max = 2;
  if (this->max() != 0) {
    total_size += 1 + 8;
  }

  // optional double num = 3;
  if (this->num() != 0) {
    total_size += 1 + 8;
  }

  // optional double sum = 4;
  if (this->sum() != 0) {
    total_size += 1 + 8;
  }

  // optional double sum_squares = 5;
  if (this->sum_squares() != 0) {
    total_size += 1 + 8;
  }

  // repeated double bucket_limit = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->bucket_limit_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bucket_limit_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double bucket = 7 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->bucket_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bucket_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistogramProto::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HistogramProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HistogramProto>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistogramProto::MergeFrom(const HistogramProto& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  bucket_limit_.MergeFrom(from.bucket_limit_);
  bucket_.MergeFrom(from.bucket_);
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
  if (from.sum() != 0) {
    set_sum(from.sum());
  }
  if (from.sum_squares() != 0) {
    set_sum_squares(from.sum_squares());
  }
}

void HistogramProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistogramProto::CopyFrom(const HistogramProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramProto::IsInitialized() const {

  return true;
}

void HistogramProto::Swap(HistogramProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistogramProto::InternalSwap(HistogramProto* other) {
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(num_, other->num_);
  std::swap(sum_, other->sum_);
  std::swap(sum_squares_, other->sum_squares_);
  bucket_limit_.UnsafeArenaSwap(&other->bucket_limit_);
  bucket_.UnsafeArenaSwap(&other->bucket_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistogramProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistogramProto_descriptor_;
  metadata.reflection = HistogramProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistogramProto

// optional double min = 1;
void HistogramProto::clear_min() {
  min_ = 0;
}
 double HistogramProto::min() const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.min)
  return min_;
}
 void HistogramProto::set_min(double value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.min)
}

// optional double max = 2;
void HistogramProto::clear_max() {
  max_ = 0;
}
 double HistogramProto::max() const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.max)
  return max_;
}
 void HistogramProto::set_max(double value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.max)
}

// optional double num = 3;
void HistogramProto::clear_num() {
  num_ = 0;
}
 double HistogramProto::num() const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.num)
  return num_;
}
 void HistogramProto::set_num(double value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.num)
}

// optional double sum = 4;
void HistogramProto::clear_sum() {
  sum_ = 0;
}
 double HistogramProto::sum() const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.sum)
  return sum_;
}
 void HistogramProto::set_sum(double value) {
  
  sum_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.sum)
}

// optional double sum_squares = 5;
void HistogramProto::clear_sum_squares() {
  sum_squares_ = 0;
}
 double HistogramProto::sum_squares() const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.sum_squares)
  return sum_squares_;
}
 void HistogramProto::set_sum_squares(double value) {
  
  sum_squares_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.sum_squares)
}

// repeated double bucket_limit = 6 [packed = true];
int HistogramProto::bucket_limit_size() const {
  return bucket_limit_.size();
}
void HistogramProto::clear_bucket_limit() {
  bucket_limit_.Clear();
}
 double HistogramProto::bucket_limit(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.bucket_limit)
  return bucket_limit_.Get(index);
}
 void HistogramProto::set_bucket_limit(int index, double value) {
  bucket_limit_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.bucket_limit)
}
 void HistogramProto::add_bucket_limit(double value) {
  bucket_limit_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.HistogramProto.bucket_limit)
}
 const ::google::protobuf::RepeatedField< double >&
HistogramProto::bucket_limit() const {
  // @@protoc_insertion_point(field_list:tensorflow.HistogramProto.bucket_limit)
  return bucket_limit_;
}
 ::google::protobuf::RepeatedField< double >*
HistogramProto::mutable_bucket_limit() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.HistogramProto.bucket_limit)
  return &bucket_limit_;
}

// repeated double bucket = 7 [packed = true];
int HistogramProto::bucket_size() const {
  return bucket_.size();
}
void HistogramProto::clear_bucket() {
  bucket_.Clear();
}
 double HistogramProto::bucket(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.bucket)
  return bucket_.Get(index);
}
 void HistogramProto::set_bucket(int index, double value) {
  bucket_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.bucket)
}
 void HistogramProto::add_bucket(double value) {
  bucket_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.HistogramProto.bucket)
}
 const ::google::protobuf::RepeatedField< double >&
HistogramProto::bucket() const {
  // @@protoc_insertion_point(field_list:tensorflow.HistogramProto.bucket)
  return bucket_;
}
 ::google::protobuf::RepeatedField< double >*
HistogramProto::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.HistogramProto.bucket)
  return &bucket_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Summary_Image::kHeightFieldNumber;
const int Summary_Image::kWidthFieldNumber;
const int Summary_Image::kColorspaceFieldNumber;
const int Summary_Image::kEncodedImageStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Summary_Image::Summary_Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.Summary.Image)
}

void Summary_Image::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Summary_Image::Summary_Image(const Summary_Image& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.Summary.Image)
}

void Summary_Image::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  height_ = 0;
  width_ = 0;
  colorspace_ = 0;
  encoded_image_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Summary_Image::~Summary_Image() {
  // @@protoc_insertion_point(destructor:tensorflow.Summary.Image)
  SharedDtor();
}

void Summary_Image::SharedDtor() {
  encoded_image_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Summary_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Summary_Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Summary_Image_descriptor_;
}

const Summary_Image& Summary_Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fsummary_2eproto();
  return *default_instance_;
}

Summary_Image* Summary_Image::default_instance_ = NULL;

Summary_Image* Summary_Image::New(::google::protobuf::Arena* arena) const {
  Summary_Image* n = new Summary_Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Summary_Image::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Summary_Image*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(height_, width_);
  colorspace_ = 0;
  encoded_image_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Summary_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.Summary.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 height = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_colorspace;
        break;
      }

      // optional int32 colorspace = 3;
      case 3: {
        if (tag == 24) {
         parse_colorspace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colorspace_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_encoded_image_string;
        break;
      }

      // optional bytes encoded_image_string = 4;
      case 4: {
        if (tag == 34) {
         parse_encoded_image_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_image_string()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.Summary.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.Summary.Image)
  return false;
#undef DO_
}

void Summary_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.Summary.Image)
  // optional int32 height = 1;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // optional int32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 colorspace = 3;
  if (this->colorspace() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->colorspace(), output);
  }

  // optional bytes encoded_image_string = 4;
  if (this->encoded_image_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->encoded_image_string(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.Summary.Image)
}

::google::protobuf::uint8* Summary_Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Summary.Image)
  // optional int32 height = 1;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->height(), target);
  }

  // optional int32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 colorspace = 3;
  if (this->colorspace() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->colorspace(), target);
  }

  // optional bytes encoded_image_string = 4;
  if (this->encoded_image_string().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->encoded_image_string(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Summary.Image)
  return target;
}

int Summary_Image::ByteSize() const {
  int total_size = 0;

  // optional int32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // optional int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 colorspace = 3;
  if (this->colorspace() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->colorspace());
  }

  // optional bytes encoded_image_string = 4;
  if (this->encoded_image_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encoded_image_string());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Summary_Image::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Summary_Image* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Summary_Image>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Summary_Image::MergeFrom(const Summary_Image& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.colorspace() != 0) {
    set_colorspace(from.colorspace());
  }
  if (from.encoded_image_string().size() > 0) {

    encoded_image_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encoded_image_string_);
  }
}

void Summary_Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary_Image::CopyFrom(const Summary_Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary_Image::IsInitialized() const {

  return true;
}

void Summary_Image::Swap(Summary_Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Summary_Image::InternalSwap(Summary_Image* other) {
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(colorspace_, other->colorspace_);
  encoded_image_string_.Swap(&other->encoded_image_string_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Summary_Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Summary_Image_descriptor_;
  metadata.reflection = Summary_Image_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Summary_Value::kTagFieldNumber;
const int Summary_Value::kSimpleValueFieldNumber;
const int Summary_Value::kObsoleteOldStyleHistogramFieldNumber;
const int Summary_Value::kImageFieldNumber;
const int Summary_Value::kHistoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Summary_Value::Summary_Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.Summary.Value)
}

void Summary_Value::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Summary_Value_default_oneof_instance_->simple_value_ = 0;
  Summary_Value_default_oneof_instance_->obsolete_old_style_histogram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  Summary_Value_default_oneof_instance_->image_ = const_cast< ::tensorflow::Summary_Image*>(&::tensorflow::Summary_Image::default_instance());
  Summary_Value_default_oneof_instance_->histo_ = const_cast< ::tensorflow::HistogramProto*>(&::tensorflow::HistogramProto::default_instance());
}

Summary_Value::Summary_Value(const Summary_Value& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.Summary.Value)
}

void Summary_Value::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}

Summary_Value::~Summary_Value() {
  // @@protoc_insertion_point(destructor:tensorflow.Summary.Value)
  SharedDtor();
}

void Summary_Value::SharedDtor() {
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void Summary_Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Summary_Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Summary_Value_descriptor_;
}

const Summary_Value& Summary_Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fsummary_2eproto();
  return *default_instance_;
}

Summary_Value* Summary_Value::default_instance_ = NULL;

Summary_Value* Summary_Value::New(::google::protobuf::Arena* arena) const {
  Summary_Value* n = new Summary_Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Summary_Value::clear_value() {
  switch(value_case()) {
    case kSimpleValue: {
      // No need to clear
      break;
    }
    case kObsoleteOldStyleHistogram: {
      value_.obsolete_old_style_histogram_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kImage: {
      delete value_.image_;
      break;
    }
    case kHisto: {
      delete value_.histo_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Summary_Value::Clear() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_value();
}

bool Summary_Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.Summary.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.Summary.Value.tag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_simple_value;
        break;
      }

      // optional float simple_value = 2;
      case 2: {
        if (tag == 21) {
         parse_simple_value:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_.simple_value_)));
          set_has_simple_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_obsolete_old_style_histogram;
        break;
      }

      // optional bytes obsolete_old_style_histogram = 3;
      case 3: {
        if (tag == 26) {
         parse_obsolete_old_style_histogram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_obsolete_old_style_histogram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_image;
        break;
      }

      // optional .tensorflow.Summary.Image image = 4;
      case 4: {
        if (tag == 34) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_histo;
        break;
      }

      // optional .tensorflow.HistogramProto histo = 5;
      case 5: {
        if (tag == 42) {
         parse_histo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_histo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.Summary.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.Summary.Value)
  return false;
#undef DO_
}

void Summary_Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.Summary.Value)
  // optional string tag = 1;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Summary.Value.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // optional float simple_value = 2;
  if (has_simple_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->simple_value(), output);
  }

  // optional bytes obsolete_old_style_histogram = 3;
  if (has_obsolete_old_style_histogram()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->obsolete_old_style_histogram(), output);
  }

  // optional .tensorflow.Summary.Image image = 4;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *value_.image_, output);
  }

  // optional .tensorflow.HistogramProto histo = 5;
  if (has_histo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_.histo_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.Summary.Value)
}

::google::protobuf::uint8* Summary_Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Summary.Value)
  // optional string tag = 1;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Summary.Value.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // optional float simple_value = 2;
  if (has_simple_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->simple_value(), target);
  }

  // optional bytes obsolete_old_style_histogram = 3;
  if (has_obsolete_old_style_histogram()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->obsolete_old_style_histogram(), target);
  }

  // optional .tensorflow.Summary.Image image = 4;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *value_.image_, target);
  }

  // optional .tensorflow.HistogramProto histo = 5;
  if (has_histo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *value_.histo_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Summary.Value)
  return target;
}

int Summary_Value::ByteSize() const {
  int total_size = 0;

  // optional string tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  switch (value_case()) {
    // optional float simple_value = 2;
    case kSimpleValue: {
      total_size += 1 + 4;
      break;
    }
    // optional bytes obsolete_old_style_histogram = 3;
    case kObsoleteOldStyleHistogram: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->obsolete_old_style_histogram());
      break;
    }
    // optional .tensorflow.Summary.Image image = 4;
    case kImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.image_);
      break;
    }
    // optional .tensorflow.HistogramProto histo = 5;
    case kHisto: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.histo_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Summary_Value::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Summary_Value* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Summary_Value>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Summary_Value::MergeFrom(const Summary_Value& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.value_case()) {
    case kSimpleValue: {
      set_simple_value(from.simple_value());
      break;
    }
    case kObsoleteOldStyleHistogram: {
      set_obsolete_old_style_histogram(from.obsolete_old_style_histogram());
      break;
    }
    case kImage: {
      mutable_image()->::tensorflow::Summary_Image::MergeFrom(from.image());
      break;
    }
    case kHisto: {
      mutable_histo()->::tensorflow::HistogramProto::MergeFrom(from.histo());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
}

void Summary_Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary_Value::CopyFrom(const Summary_Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary_Value::IsInitialized() const {

  return true;
}

void Summary_Value::Swap(Summary_Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Summary_Value::InternalSwap(Summary_Value* other) {
  tag_.Swap(&other->tag_);
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Summary_Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Summary_Value_descriptor_;
  metadata.reflection = Summary_Value_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Summary::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Summary::Summary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.Summary)
}

void Summary::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Summary::Summary(const Summary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.Summary)
}

void Summary::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Summary::~Summary() {
  // @@protoc_insertion_point(destructor:tensorflow.Summary)
  SharedDtor();
}

void Summary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Summary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Summary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Summary_descriptor_;
}

const Summary& Summary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fsummary_2eproto();
  return *default_instance_;
}

Summary* Summary::default_instance_ = NULL;

Summary* Summary::New(::google::protobuf::Arena* arena) const {
  Summary* n = new Summary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Summary::Clear() {
  value_.Clear();
}

bool Summary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.Summary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.Summary.Value value = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_value;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.Summary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.Summary)
  return false;
#undef DO_
}

void Summary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.Summary)
  // repeated .tensorflow.Summary.Value value = 1;
  for (unsigned int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.Summary)
}

::google::protobuf::uint8* Summary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Summary)
  // repeated .tensorflow.Summary.Value value = 1;
  for (unsigned int i = 0, n = this->value_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Summary)
  return target;
}

int Summary::ByteSize() const {
  int total_size = 0;

  // repeated .tensorflow.Summary.Value value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Summary::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Summary* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Summary>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Summary::MergeFrom(const Summary& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  value_.MergeFrom(from.value_);
}

void Summary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary::CopyFrom(const Summary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary::IsInitialized() const {

  return true;
}

void Summary::Swap(Summary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Summary::InternalSwap(Summary* other) {
  value_.UnsafeArenaSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Summary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Summary_descriptor_;
  metadata.reflection = Summary_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Summary_Image

// optional int32 height = 1;
void Summary_Image::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 Summary_Image::height() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Image.height)
  return height_;
}
 void Summary_Image::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.Summary.Image.height)
}

// optional int32 width = 2;
void Summary_Image::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 Summary_Image::width() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Image.width)
  return width_;
}
 void Summary_Image::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.Summary.Image.width)
}

// optional int32 colorspace = 3;
void Summary_Image::clear_colorspace() {
  colorspace_ = 0;
}
 ::google::protobuf::int32 Summary_Image::colorspace() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Image.colorspace)
  return colorspace_;
}
 void Summary_Image::set_colorspace(::google::protobuf::int32 value) {
  
  colorspace_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.Summary.Image.colorspace)
}

// optional bytes encoded_image_string = 4;
void Summary_Image::clear_encoded_image_string() {
  encoded_image_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Summary_Image::encoded_image_string() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Image.encoded_image_string)
  return encoded_image_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Summary_Image::set_encoded_image_string(const ::std::string& value) {
  
  encoded_image_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.Summary.Image.encoded_image_string)
}
 void Summary_Image::set_encoded_image_string(const char* value) {
  
  encoded_image_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.Summary.Image.encoded_image_string)
}
 void Summary_Image::set_encoded_image_string(const void* value, size_t size) {
  
  encoded_image_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.Summary.Image.encoded_image_string)
}
 ::std::string* Summary_Image::mutable_encoded_image_string() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.Summary.Image.encoded_image_string)
  return encoded_image_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Summary_Image::release_encoded_image_string() {
  
  return encoded_image_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Summary_Image::set_allocated_encoded_image_string(::std::string* encoded_image_string) {
  if (encoded_image_string != NULL) {
    
  } else {
    
  }
  encoded_image_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encoded_image_string);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Summary.Image.encoded_image_string)
}

// -------------------------------------------------------------------

// Summary_Value

// optional string tag = 1;
void Summary_Value::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Summary_Value::tag() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Value.tag)
  return tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Summary_Value::set_tag(const ::std::string& value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.Summary.Value.tag)
}
 void Summary_Value::set_tag(const char* value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.Summary.Value.tag)
}
 void Summary_Value::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.Summary.Value.tag)
}
 ::std::string* Summary_Value::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.Summary.Value.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Summary_Value::release_tag() {
  
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Summary_Value::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Summary.Value.tag)
}

// optional float simple_value = 2;
bool Summary_Value::has_simple_value() const {
  return value_case() == kSimpleValue;
}
void Summary_Value::set_has_simple_value() {
  _oneof_case_[0] = kSimpleValue;
}
void Summary_Value::clear_simple_value() {
  if (has_simple_value()) {
    value_.simple_value_ = 0;
    clear_has_value();
  }
}
 float Summary_Value::simple_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Value.simple_value)
  if (has_simple_value()) {
    return value_.simple_value_;
  }
  return 0;
}
 void Summary_Value::set_simple_value(float value) {
  if (!has_simple_value()) {
    clear_value();
    set_has_simple_value();
  }
  value_.simple_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.Summary.Value.simple_value)
}

// optional bytes obsolete_old_style_histogram = 3;
bool Summary_Value::has_obsolete_old_style_histogram() const {
  return value_case() == kObsoleteOldStyleHistogram;
}
void Summary_Value::set_has_obsolete_old_style_histogram() {
  _oneof_case_[0] = kObsoleteOldStyleHistogram;
}
void Summary_Value::clear_obsolete_old_style_histogram() {
  if (has_obsolete_old_style_histogram()) {
    value_.obsolete_old_style_histogram_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
 const ::std::string& Summary_Value::obsolete_old_style_histogram() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Value.obsolete_old_style_histogram)
  if (has_obsolete_old_style_histogram()) {
    return value_.obsolete_old_style_histogram_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Summary_Value::set_obsolete_old_style_histogram(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.Summary.Value.obsolete_old_style_histogram)
  if (!has_obsolete_old_style_histogram()) {
    clear_value();
    set_has_obsolete_old_style_histogram();
    value_.obsolete_old_style_histogram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.obsolete_old_style_histogram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.Summary.Value.obsolete_old_style_histogram)
}
 void Summary_Value::set_obsolete_old_style_histogram(const char* value) {
  if (!has_obsolete_old_style_histogram()) {
    clear_value();
    set_has_obsolete_old_style_histogram();
    value_.obsolete_old_style_histogram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.obsolete_old_style_histogram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.Summary.Value.obsolete_old_style_histogram)
}
 void Summary_Value::set_obsolete_old_style_histogram(const void* value, size_t size) {
  if (!has_obsolete_old_style_histogram()) {
    clear_value();
    set_has_obsolete_old_style_histogram();
    value_.obsolete_old_style_histogram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.obsolete_old_style_histogram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.Summary.Value.obsolete_old_style_histogram)
}
 ::std::string* Summary_Value::mutable_obsolete_old_style_histogram() {
  if (!has_obsolete_old_style_histogram()) {
    clear_value();
    set_has_obsolete_old_style_histogram();
    value_.obsolete_old_style_histogram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.Summary.Value.obsolete_old_style_histogram)
  return value_.obsolete_old_style_histogram_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Summary_Value::release_obsolete_old_style_histogram() {
  if (has_obsolete_old_style_histogram()) {
    clear_has_value();
    return value_.obsolete_old_style_histogram_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Summary_Value::set_allocated_obsolete_old_style_histogram(::std::string* obsolete_old_style_histogram) {
  if (!has_obsolete_old_style_histogram()) {
    value_.obsolete_old_style_histogram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (obsolete_old_style_histogram != NULL) {
    set_has_obsolete_old_style_histogram();
    value_.obsolete_old_style_histogram_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        obsolete_old_style_histogram);
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Summary.Value.obsolete_old_style_histogram)
}

// optional .tensorflow.Summary.Image image = 4;
bool Summary_Value::has_image() const {
  return value_case() == kImage;
}
void Summary_Value::set_has_image() {
  _oneof_case_[0] = kImage;
}
void Summary_Value::clear_image() {
  if (has_image()) {
    delete value_.image_;
    clear_has_value();
  }
}
 const ::tensorflow::Summary_Image& Summary_Value::image() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Value.image)
  return has_image()
      ? *value_.image_
      : ::tensorflow::Summary_Image::default_instance();
}
::tensorflow::Summary_Image* Summary_Value::mutable_image() {
  if (!has_image()) {
    clear_value();
    set_has_image();
    value_.image_ = new ::tensorflow::Summary_Image;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.Summary.Value.image)
  return value_.image_;
}
::tensorflow::Summary_Image* Summary_Value::release_image() {
  if (has_image()) {
    clear_has_value();
    ::tensorflow::Summary_Image* temp = value_.image_;
    value_.image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Summary_Value::set_allocated_image(::tensorflow::Summary_Image* image) {
  clear_value();
  if (image) {
    set_has_image();
    value_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Summary.Value.image)
}

// optional .tensorflow.HistogramProto histo = 5;
bool Summary_Value::has_histo() const {
  return value_case() == kHisto;
}
void Summary_Value::set_has_histo() {
  _oneof_case_[0] = kHisto;
}
void Summary_Value::clear_histo() {
  if (has_histo()) {
    delete value_.histo_;
    clear_has_value();
  }
}
 const ::tensorflow::HistogramProto& Summary_Value::histo() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Value.histo)
  return has_histo()
      ? *value_.histo_
      : ::tensorflow::HistogramProto::default_instance();
}
::tensorflow::HistogramProto* Summary_Value::mutable_histo() {
  if (!has_histo()) {
    clear_value();
    set_has_histo();
    value_.histo_ = new ::tensorflow::HistogramProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.Summary.Value.histo)
  return value_.histo_;
}
::tensorflow::HistogramProto* Summary_Value::release_histo() {
  if (has_histo()) {
    clear_has_value();
    ::tensorflow::HistogramProto* temp = value_.histo_;
    value_.histo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Summary_Value::set_allocated_histo(::tensorflow::HistogramProto* histo) {
  clear_value();
  if (histo) {
    set_has_histo();
    value_.histo_ = histo;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Summary.Value.histo)
}

bool Summary_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void Summary_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
Summary_Value::ValueCase Summary_Value::value_case() const {
  return Summary_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Summary

// repeated .tensorflow.Summary.Value value = 1;
int Summary::value_size() const {
  return value_.size();
}
void Summary::clear_value() {
  value_.Clear();
}
const ::tensorflow::Summary_Value& Summary::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.value)
  return value_.Get(index);
}
::tensorflow::Summary_Value* Summary::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.Summary.value)
  return value_.Mutable(index);
}
::tensorflow::Summary_Value* Summary::add_value() {
  // @@protoc_insertion_point(field_add:tensorflow.Summary.value)
  return value_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::Summary_Value >*
Summary::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.Summary.value)
  return &value_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::Summary_Value >&
Summary::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.Summary.value)
  return value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
