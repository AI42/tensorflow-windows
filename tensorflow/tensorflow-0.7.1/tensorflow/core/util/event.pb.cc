// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/util/event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/util/event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
struct EventOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr file_version_;
  ::google::protobuf::internal::ArenaStringPtr graph_def_;
  const ::tensorflow::Summary* summary_;
  const ::tensorflow::LogMessage* log_message_;
  const ::tensorflow::SessionLog* session_log_;
}* Event_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* LogMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogMessage_Level_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SessionLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionLog_SessionStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2futil_2fevent_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2futil_2fevent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/util/event.proto");
  GOOGLE_CHECK(file != NULL);
  Event_descriptor_ = file->message_type(0);
  static const int Event_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, wall_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, step_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Event_default_oneof_instance_, file_version_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Event_default_oneof_instance_, graph_def_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Event_default_oneof_instance_, summary_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Event_default_oneof_instance_, log_message_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Event_default_oneof_instance_, session_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, what_),
  };
  Event_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      -1,
      -1,
      -1,
      Event_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _oneof_case_[0]),
      sizeof(Event),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _is_default_instance_));
  LogMessage_descriptor_ = file->message_type(1);
  static const int LogMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, message_),
  };
  LogMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogMessage_descriptor_,
      LogMessage::default_instance_,
      LogMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, _is_default_instance_));
  LogMessage_Level_descriptor_ = LogMessage_descriptor_->enum_type(0);
  SessionLog_descriptor_ = file->message_type(2);
  static const int SessionLog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionLog, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionLog, checkpoint_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionLog, msg_),
  };
  SessionLog_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SessionLog_descriptor_,
      SessionLog::default_instance_,
      SessionLog_offsets_,
      -1,
      -1,
      -1,
      sizeof(SessionLog),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionLog, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionLog, _is_default_instance_));
  SessionLog_SessionStatus_descriptor_ = SessionLog_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2futil_2fevent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogMessage_descriptor_, &LogMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SessionLog_descriptor_, &SessionLog::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2futil_2fevent_2eproto() {
  delete Event::default_instance_;
  delete Event_default_oneof_instance_;
  delete Event_reflection_;
  delete LogMessage::default_instance_;
  delete LogMessage_reflection_;
  delete SessionLog::default_instance_;
  delete SessionLog_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2futil_2fevent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fsummary_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n tensorflow/core/util/event.proto\022\ntens"
    "orflow\032\'tensorflow/core/framework/summar"
    "y.proto\"\343\001\n\005Event\022\021\n\twall_time\030\001 \001(\001\022\014\n\004"
    "step\030\002 \001(\003\022\026\n\014file_version\030\003 \001(\tH\000\022\023\n\tgr"
    "aph_def\030\004 \001(\014H\000\022&\n\007summary\030\005 \001(\0132\023.tenso"
    "rflow.SummaryH\000\022-\n\013log_message\030\006 \001(\0132\026.t"
    "ensorflow.LogMessageH\000\022-\n\013session_log\030\007 "
    "\001(\0132\026.tensorflow.SessionLogH\000B\006\n\004what\"\225\001"
    "\n\nLogMessage\022+\n\005level\030\001 \001(\0162\034.tensorflow"
    ".LogMessage.Level\022\017\n\007message\030\002 \001(\t\"I\n\005Le"
    "vel\022\013\n\007UNKNOWN\020\000\022\t\n\005DEBUG\020\n\022\010\n\004INFO\020\024\022\010\n"
    "\004WARN\020\036\022\t\n\005ERROR\020(\022\t\n\005FATAL\0202\"\266\001\n\nSessio"
    "nLog\0224\n\006status\030\001 \001(\0162$.tensorflow.Sessio"
    "nLog.SessionStatus\022\027\n\017checkpoint_path\030\002 "
    "\001(\t\022\013\n\003msg\030\003 \001(\t\"L\n\rSessionStatus\022\026\n\022STA"
    "TUS_UNSPECIFIED\020\000\022\t\n\005START\020\001\022\010\n\004STOP\020\002\022\016"
    "\n\nCHECKPOINT\020\003B$\n\023org.tensorflow.utilB\013E"
    "ventProtosP\001b\006proto3", 700);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/util/event.proto", &protobuf_RegisterTypes);
  Event::default_instance_ = new Event();
  Event_default_oneof_instance_ = new EventOneofInstance();
  LogMessage::default_instance_ = new LogMessage();
  SessionLog::default_instance_ = new SessionLog();
  Event::default_instance_->InitAsDefaultInstance();
  LogMessage::default_instance_->InitAsDefaultInstance();
  SessionLog::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2futil_2fevent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2futil_2fevent_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2futil_2fevent_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2futil_2fevent_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2futil_2fevent_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kWallTimeFieldNumber;
const int Event::kStepFieldNumber;
const int Event::kFileVersionFieldNumber;
const int Event::kGraphDefFieldNumber;
const int Event::kSummaryFieldNumber;
const int Event::kLogMessageFieldNumber;
const int Event::kSessionLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.Event)
}

void Event::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Event_default_oneof_instance_->file_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  Event_default_oneof_instance_->graph_def_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  Event_default_oneof_instance_->summary_ = const_cast< ::tensorflow::Summary*>(&::tensorflow::Summary::default_instance());
  Event_default_oneof_instance_->log_message_ = const_cast< ::tensorflow::LogMessage*>(&::tensorflow::LogMessage::default_instance());
  Event_default_oneof_instance_->session_log_ = const_cast< ::tensorflow::SessionLog*>(&::tensorflow::SessionLog::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.Event)
}

void Event::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wall_time_ = 0;
  step_ = GOOGLE_LONGLONG(0);
  clear_has_what();
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:tensorflow.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (has_what()) {
    clear_what();
  }
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2futil_2fevent_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::clear_what() {
  switch(what_case()) {
    case kFileVersion: {
      what_.file_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGraphDef: {
      what_.graph_def_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kSummary: {
      delete what_.summary_;
      break;
    }
    case kLogMessage: {
      delete what_.log_message_;
      break;
    }
    case kSessionLog: {
      delete what_.session_log_;
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WHAT_NOT_SET;
}


void Event::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Event*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(wall_time_, step_);

#undef ZR_HELPER_
#undef ZR_

  clear_what();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double wall_time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wall_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_step;
        break;
      }

      // optional int64 step = 2;
      case 2: {
        if (tag == 16) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file_version;
        break;
      }

      // optional string file_version = 3;
      case 3: {
        if (tag == 26) {
         parse_file_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_version().data(), this->file_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.Event.file_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_graph_def;
        break;
      }

      // optional bytes graph_def = 4;
      case 4: {
        if (tag == 34) {
         parse_graph_def:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_graph_def()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_summary;
        break;
      }

      // optional .tensorflow.Summary summary = 5;
      case 5: {
        if (tag == 42) {
         parse_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_log_message;
        break;
      }

      // optional .tensorflow.LogMessage log_message = 6;
      case 6: {
        if (tag == 50) {
         parse_log_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_session_log;
        break;
      }

      // optional .tensorflow.SessionLog session_log = 7;
      case 7: {
        if (tag == 58) {
         parse_session_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.Event)
  // optional double wall_time = 1;
  if (this->wall_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->wall_time(), output);
  }

  // optional int64 step = 2;
  if (this->step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->step(), output);
  }

  // optional string file_version = 3;
  if (has_file_version()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_version().data(), this->file_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Event.file_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_version(), output);
  }

  // optional bytes graph_def = 4;
  if (has_graph_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->graph_def(), output);
  }

  // optional .tensorflow.Summary summary = 5;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *what_.summary_, output);
  }

  // optional .tensorflow.LogMessage log_message = 6;
  if (has_log_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *what_.log_message_, output);
  }

  // optional .tensorflow.SessionLog session_log = 7;
  if (has_session_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *what_.session_log_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.Event)
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Event)
  // optional double wall_time = 1;
  if (this->wall_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->wall_time(), target);
  }

  // optional int64 step = 2;
  if (this->step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->step(), target);
  }

  // optional string file_version = 3;
  if (has_file_version()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_version().data(), this->file_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Event.file_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_version(), target);
  }

  // optional bytes graph_def = 4;
  if (has_graph_def()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->graph_def(), target);
  }

  // optional .tensorflow.Summary summary = 5;
  if (has_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *what_.summary_, target);
  }

  // optional .tensorflow.LogMessage log_message = 6;
  if (has_log_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *what_.log_message_, target);
  }

  // optional .tensorflow.SessionLog session_log = 7;
  if (has_session_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *what_.session_log_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Event)
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;

  // optional double wall_time = 1;
  if (this->wall_time() != 0) {
    total_size += 1 + 8;
  }

  // optional int64 step = 2;
  if (this->step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step());
  }

  switch (what_case()) {
    // optional string file_version = 3;
    case kFileVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_version());
      break;
    }
    // optional bytes graph_def = 4;
    case kGraphDef: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->graph_def());
      break;
    }
    // optional .tensorflow.Summary summary = 5;
    case kSummary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *what_.summary_);
      break;
    }
    // optional .tensorflow.LogMessage log_message = 6;
    case kLogMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *what_.log_message_);
      break;
    }
    // optional .tensorflow.SessionLog session_log = 7;
    case kSessionLog: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *what_.session_log_);
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Event* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.what_case()) {
    case kFileVersion: {
      set_file_version(from.file_version());
      break;
    }
    case kGraphDef: {
      set_graph_def(from.graph_def());
      break;
    }
    case kSummary: {
      mutable_summary()->::tensorflow::Summary::MergeFrom(from.summary());
      break;
    }
    case kLogMessage: {
      mutable_log_message()->::tensorflow::LogMessage::MergeFrom(from.log_message());
      break;
    }
    case kSessionLog: {
      mutable_session_log()->::tensorflow::SessionLog::MergeFrom(from.session_log());
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  if (from.wall_time() != 0) {
    set_wall_time(from.wall_time());
  }
  if (from.step() != 0) {
    set_step(from.step());
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {

  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  std::swap(wall_time_, other->wall_time_);
  std::swap(step_, other->step_);
  std::swap(what_, other->what_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// optional double wall_time = 1;
void Event::clear_wall_time() {
  wall_time_ = 0;
}
 double Event::wall_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.Event.wall_time)
  return wall_time_;
}
 void Event::set_wall_time(double value) {
  
  wall_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.Event.wall_time)
}

// optional int64 step = 2;
void Event::clear_step() {
  step_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Event::step() const {
  // @@protoc_insertion_point(field_get:tensorflow.Event.step)
  return step_;
}
 void Event::set_step(::google::protobuf::int64 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.Event.step)
}

// optional string file_version = 3;
bool Event::has_file_version() const {
  return what_case() == kFileVersion;
}
void Event::set_has_file_version() {
  _oneof_case_[0] = kFileVersion;
}
void Event::clear_file_version() {
  if (has_file_version()) {
    what_.file_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_what();
  }
}
 const ::std::string& Event::file_version() const {
  // @@protoc_insertion_point(field_get:tensorflow.Event.file_version)
  if (has_file_version()) {
    return what_.file_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Event::set_file_version(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.Event.file_version)
  if (!has_file_version()) {
    clear_what();
    set_has_file_version();
    what_.file_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  what_.file_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.Event.file_version)
}
 void Event::set_file_version(const char* value) {
  if (!has_file_version()) {
    clear_what();
    set_has_file_version();
    what_.file_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  what_.file_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.Event.file_version)
}
 void Event::set_file_version(const char* value, size_t size) {
  if (!has_file_version()) {
    clear_what();
    set_has_file_version();
    what_.file_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  what_.file_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.Event.file_version)
}
 ::std::string* Event::mutable_file_version() {
  if (!has_file_version()) {
    clear_what();
    set_has_file_version();
    what_.file_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.Event.file_version)
  return what_.file_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_file_version() {
  if (has_file_version()) {
    clear_has_what();
    return what_.file_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Event::set_allocated_file_version(::std::string* file_version) {
  if (!has_file_version()) {
    what_.file_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_what();
  if (file_version != NULL) {
    set_has_file_version();
    what_.file_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        file_version);
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.file_version)
}

// optional bytes graph_def = 4;
bool Event::has_graph_def() const {
  return what_case() == kGraphDef;
}
void Event::set_has_graph_def() {
  _oneof_case_[0] = kGraphDef;
}
void Event::clear_graph_def() {
  if (has_graph_def()) {
    what_.graph_def_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_what();
  }
}
 const ::std::string& Event::graph_def() const {
  // @@protoc_insertion_point(field_get:tensorflow.Event.graph_def)
  if (has_graph_def()) {
    return what_.graph_def_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Event::set_graph_def(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.Event.graph_def)
  if (!has_graph_def()) {
    clear_what();
    set_has_graph_def();
    what_.graph_def_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  what_.graph_def_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.Event.graph_def)
}
 void Event::set_graph_def(const char* value) {
  if (!has_graph_def()) {
    clear_what();
    set_has_graph_def();
    what_.graph_def_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  what_.graph_def_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.Event.graph_def)
}
 void Event::set_graph_def(const void* value, size_t size) {
  if (!has_graph_def()) {
    clear_what();
    set_has_graph_def();
    what_.graph_def_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  what_.graph_def_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.Event.graph_def)
}
 ::std::string* Event::mutable_graph_def() {
  if (!has_graph_def()) {
    clear_what();
    set_has_graph_def();
    what_.graph_def_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.Event.graph_def)
  return what_.graph_def_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_graph_def() {
  if (has_graph_def()) {
    clear_has_what();
    return what_.graph_def_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Event::set_allocated_graph_def(::std::string* graph_def) {
  if (!has_graph_def()) {
    what_.graph_def_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_what();
  if (graph_def != NULL) {
    set_has_graph_def();
    what_.graph_def_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        graph_def);
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.graph_def)
}

// optional .tensorflow.Summary summary = 5;
bool Event::has_summary() const {
  return what_case() == kSummary;
}
void Event::set_has_summary() {
  _oneof_case_[0] = kSummary;
}
void Event::clear_summary() {
  if (has_summary()) {
    delete what_.summary_;
    clear_has_what();
  }
}
 const ::tensorflow::Summary& Event::summary() const {
  // @@protoc_insertion_point(field_get:tensorflow.Event.summary)
  return has_summary()
      ? *what_.summary_
      : ::tensorflow::Summary::default_instance();
}
::tensorflow::Summary* Event::mutable_summary() {
  if (!has_summary()) {
    clear_what();
    set_has_summary();
    what_.summary_ = new ::tensorflow::Summary;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.Event.summary)
  return what_.summary_;
}
::tensorflow::Summary* Event::release_summary() {
  if (has_summary()) {
    clear_has_what();
    ::tensorflow::Summary* temp = what_.summary_;
    what_.summary_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Event::set_allocated_summary(::tensorflow::Summary* summary) {
  clear_what();
  if (summary) {
    set_has_summary();
    what_.summary_ = summary;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.summary)
}

// optional .tensorflow.LogMessage log_message = 6;
bool Event::has_log_message() const {
  return what_case() == kLogMessage;
}
void Event::set_has_log_message() {
  _oneof_case_[0] = kLogMessage;
}
void Event::clear_log_message() {
  if (has_log_message()) {
    delete what_.log_message_;
    clear_has_what();
  }
}
 const ::tensorflow::LogMessage& Event::log_message() const {
  // @@protoc_insertion_point(field_get:tensorflow.Event.log_message)
  return has_log_message()
      ? *what_.log_message_
      : ::tensorflow::LogMessage::default_instance();
}
::tensorflow::LogMessage* Event::mutable_log_message() {
  if (!has_log_message()) {
    clear_what();
    set_has_log_message();
    what_.log_message_ = new ::tensorflow::LogMessage;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.Event.log_message)
  return what_.log_message_;
}
::tensorflow::LogMessage* Event::release_log_message() {
  if (has_log_message()) {
    clear_has_what();
    ::tensorflow::LogMessage* temp = what_.log_message_;
    what_.log_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Event::set_allocated_log_message(::tensorflow::LogMessage* log_message) {
  clear_what();
  if (log_message) {
    set_has_log_message();
    what_.log_message_ = log_message;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.log_message)
}

// optional .tensorflow.SessionLog session_log = 7;
bool Event::has_session_log() const {
  return what_case() == kSessionLog;
}
void Event::set_has_session_log() {
  _oneof_case_[0] = kSessionLog;
}
void Event::clear_session_log() {
  if (has_session_log()) {
    delete what_.session_log_;
    clear_has_what();
  }
}
 const ::tensorflow::SessionLog& Event::session_log() const {
  // @@protoc_insertion_point(field_get:tensorflow.Event.session_log)
  return has_session_log()
      ? *what_.session_log_
      : ::tensorflow::SessionLog::default_instance();
}
::tensorflow::SessionLog* Event::mutable_session_log() {
  if (!has_session_log()) {
    clear_what();
    set_has_session_log();
    what_.session_log_ = new ::tensorflow::SessionLog;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.Event.session_log)
  return what_.session_log_;
}
::tensorflow::SessionLog* Event::release_session_log() {
  if (has_session_log()) {
    clear_has_what();
    ::tensorflow::SessionLog* temp = what_.session_log_;
    what_.session_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Event::set_allocated_session_log(::tensorflow::SessionLog* session_log) {
  clear_what();
  if (session_log) {
    set_has_session_log();
    what_.session_log_ = session_log;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.session_log)
}

bool Event::has_what() const {
  return what_case() != WHAT_NOT_SET;
}
void Event::clear_has_what() {
  _oneof_case_[0] = WHAT_NOT_SET;
}
Event::WhatCase Event::what_case() const {
  return Event::WhatCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LogMessage_Level_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMessage_Level_descriptor_;
}
bool LogMessage_Level_IsValid(int value) {
  switch(value) {
    case 0:
    case 10:
    case 20:
    case 30:
    case 40:
    case 50:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LogMessage_Level LogMessage::UNKNOWN;
const LogMessage_Level LogMessage::DEBUG;
const LogMessage_Level LogMessage::INFO;
const LogMessage_Level LogMessage::WARN;
const LogMessage_Level LogMessage::ERROR;
const LogMessage_Level LogMessage::FATAL;
const LogMessage_Level LogMessage::Level_MIN;
const LogMessage_Level LogMessage::Level_MAX;
const int LogMessage::Level_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMessage::kLevelFieldNumber;
const int LogMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogMessage::LogMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.LogMessage)
}

void LogMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogMessage::LogMessage(const LogMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.LogMessage)
}

void LogMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  level_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogMessage::~LogMessage() {
  // @@protoc_insertion_point(destructor:tensorflow.LogMessage)
  SharedDtor();
}

void LogMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMessage_descriptor_;
}

const LogMessage& LogMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2futil_2fevent_2eproto();
  return *default_instance_;
}

LogMessage* LogMessage::default_instance_ = NULL;

LogMessage* LogMessage::New(::google::protobuf::Arena* arena) const {
  LogMessage* n = new LogMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogMessage::Clear() {
  level_ = 0;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LogMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.LogMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.LogMessage.Level level = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::tensorflow::LogMessage_Level >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.LogMessage.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.LogMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.LogMessage)
  return false;
#undef DO_
}

void LogMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.LogMessage)
  // optional .tensorflow.LogMessage.Level level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->level(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.LogMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.LogMessage)
}

::google::protobuf::uint8* LogMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.LogMessage)
  // optional .tensorflow.LogMessage.Level level = 1;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->level(), target);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.LogMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.LogMessage)
  return target;
}

int LogMessage::ByteSize() const {
  int total_size = 0;

  // optional .tensorflow.LogMessage.Level level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogMessage::MergeFrom(const LogMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void LogMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMessage::CopyFrom(const LogMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessage::IsInitialized() const {

  return true;
}

void LogMessage::Swap(LogMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogMessage::InternalSwap(LogMessage* other) {
  std::swap(level_, other->level_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMessage_descriptor_;
  metadata.reflection = LogMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogMessage

// optional .tensorflow.LogMessage.Level level = 1;
void LogMessage::clear_level() {
  level_ = 0;
}
 ::tensorflow::LogMessage_Level LogMessage::level() const {
  // @@protoc_insertion_point(field_get:tensorflow.LogMessage.level)
  return static_cast< ::tensorflow::LogMessage_Level >(level_);
}
 void LogMessage::set_level(::tensorflow::LogMessage_Level value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.LogMessage.level)
}

// optional string message = 2;
void LogMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogMessage::message() const {
  // @@protoc_insertion_point(field_get:tensorflow.LogMessage.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.LogMessage.message)
}
 void LogMessage::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.LogMessage.message)
}
 void LogMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.LogMessage.message)
}
 ::std::string* LogMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.LogMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogMessage::release_message() {
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.LogMessage.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SessionLog_SessionStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionLog_SessionStatus_descriptor_;
}
bool SessionLog_SessionStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SessionLog_SessionStatus SessionLog::STATUS_UNSPECIFIED;
const SessionLog_SessionStatus SessionLog::START;
const SessionLog_SessionStatus SessionLog::STOP;
const SessionLog_SessionStatus SessionLog::CHECKPOINT;
const SessionLog_SessionStatus SessionLog::SessionStatus_MIN;
const SessionLog_SessionStatus SessionLog::SessionStatus_MAX;
const int SessionLog::SessionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionLog::kStatusFieldNumber;
const int SessionLog::kCheckpointPathFieldNumber;
const int SessionLog::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionLog::SessionLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SessionLog)
}

void SessionLog::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SessionLog::SessionLog(const SessionLog& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.SessionLog)
}

void SessionLog::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  checkpoint_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SessionLog::~SessionLog() {
  // @@protoc_insertion_point(destructor:tensorflow.SessionLog)
  SharedDtor();
}

void SessionLog::SharedDtor() {
  checkpoint_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SessionLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionLog_descriptor_;
}

const SessionLog& SessionLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2futil_2fevent_2eproto();
  return *default_instance_;
}

SessionLog* SessionLog::default_instance_ = NULL;

SessionLog* SessionLog::New(::google::protobuf::Arena* arena) const {
  SessionLog* n = new SessionLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionLog::Clear() {
  status_ = 0;
  checkpoint_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SessionLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SessionLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.SessionLog.SessionStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::tensorflow::SessionLog_SessionStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_checkpoint_path;
        break;
      }

      // optional string checkpoint_path = 2;
      case 2: {
        if (tag == 18) {
         parse_checkpoint_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checkpoint_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->checkpoint_path().data(), this->checkpoint_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.SessionLog.checkpoint_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (tag == 26) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.SessionLog.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SessionLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SessionLog)
  return false;
#undef DO_
}

void SessionLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SessionLog)
  // optional .tensorflow.SessionLog.SessionStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string checkpoint_path = 2;
  if (this->checkpoint_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checkpoint_path().data(), this->checkpoint_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SessionLog.checkpoint_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->checkpoint_path(), output);
  }

  // optional string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SessionLog.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.SessionLog)
}

::google::protobuf::uint8* SessionLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SessionLog)
  // optional .tensorflow.SessionLog.SessionStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string checkpoint_path = 2;
  if (this->checkpoint_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checkpoint_path().data(), this->checkpoint_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SessionLog.checkpoint_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->checkpoint_path(), target);
  }

  // optional string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SessionLog.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SessionLog)
  return target;
}

int SessionLog::ByteSize() const {
  int total_size = 0;

  // optional .tensorflow.SessionLog.SessionStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional string checkpoint_path = 2;
  if (this->checkpoint_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->checkpoint_path());
  }

  // optional string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionLog::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SessionLog* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionLog>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionLog::MergeFrom(const SessionLog& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.checkpoint_path().size() > 0) {

    checkpoint_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checkpoint_path_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SessionLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionLog::CopyFrom(const SessionLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionLog::IsInitialized() const {

  return true;
}

void SessionLog::Swap(SessionLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionLog::InternalSwap(SessionLog* other) {
  std::swap(status_, other->status_);
  checkpoint_path_.Swap(&other->checkpoint_path_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionLog_descriptor_;
  metadata.reflection = SessionLog_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionLog

// optional .tensorflow.SessionLog.SessionStatus status = 1;
void SessionLog::clear_status() {
  status_ = 0;
}
 ::tensorflow::SessionLog_SessionStatus SessionLog::status() const {
  // @@protoc_insertion_point(field_get:tensorflow.SessionLog.status)
  return static_cast< ::tensorflow::SessionLog_SessionStatus >(status_);
}
 void SessionLog::set_status(::tensorflow::SessionLog_SessionStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.SessionLog.status)
}

// optional string checkpoint_path = 2;
void SessionLog::clear_checkpoint_path() {
  checkpoint_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SessionLog::checkpoint_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.SessionLog.checkpoint_path)
  return checkpoint_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionLog::set_checkpoint_path(const ::std::string& value) {
  
  checkpoint_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.SessionLog.checkpoint_path)
}
 void SessionLog::set_checkpoint_path(const char* value) {
  
  checkpoint_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.SessionLog.checkpoint_path)
}
 void SessionLog::set_checkpoint_path(const char* value, size_t size) {
  
  checkpoint_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.SessionLog.checkpoint_path)
}
 ::std::string* SessionLog::mutable_checkpoint_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.SessionLog.checkpoint_path)
  return checkpoint_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SessionLog::release_checkpoint_path() {
  
  return checkpoint_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionLog::set_allocated_checkpoint_path(::std::string* checkpoint_path) {
  if (checkpoint_path != NULL) {
    
  } else {
    
  }
  checkpoint_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checkpoint_path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SessionLog.checkpoint_path)
}

// optional string msg = 3;
void SessionLog::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SessionLog::msg() const {
  // @@protoc_insertion_point(field_get:tensorflow.SessionLog.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionLog::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.SessionLog.msg)
}
 void SessionLog::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.SessionLog.msg)
}
 void SessionLog::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.SessionLog.msg)
}
 ::std::string* SessionLog::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.SessionLog.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SessionLog::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionLog::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SessionLog.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
